package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Rehab;

/**
 * Abstract base class for {@link Rehab} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRehabAssert<S extends AbstractRehabAssert<S, A>, A extends Rehab> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRehabAssert}</code> to make assertions on actual Rehab.
   * @param actual the Rehab we want to make assertions on.
   */
  protected AbstractRehabAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Rehab's date is equal to the given one.
   * @param date the given date to compare the actual Rehab's date to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Rehab's date is not equal to the given one.
   */
  public S hasDate(java.time.LocalDate date) {
    // check that actual Rehab we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting date of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualDate = actual.getDate();
    if (!Objects.areEqual(actualDate, date)) {
      failWithMessage(assertjErrorMessage, actual, date, actualDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Rehab's description is equal to the given one.
   * @param description the given description to compare the actual Rehab's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Rehab's description is not equal to the given one.
   */
  public S hasDescription(String description) {
    // check that actual Rehab we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Rehab's pet is equal to the given one.
   * @param pet the given pet to compare the actual Rehab's pet to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Rehab's pet is not equal to the given one.
   */
  public S hasPet(org.springframework.samples.petclinic.model.Pet pet) {
    // check that actual Rehab we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pet of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Pet actualPet = actual.getPet();
    if (!Objects.areEqual(actualPet, pet)) {
      failWithMessage(assertjErrorMessage, actual, pet, actualPet);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Rehab's time is equal to the given one.
   * @param time the given time to compare the actual Rehab's time to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Rehab's time is not equal to the given one.
   */
  public S hasTime(Integer time) {
    // check that actual Rehab we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting time of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualTime = actual.getTime();
    if (!Objects.areEqual(actualTime, time)) {
      failWithMessage(assertjErrorMessage, actual, time, actualTime);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Rehab's trainer is equal to the given one.
   * @param trainer the given trainer to compare the actual Rehab's trainer to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Rehab's trainer is not equal to the given one.
   */
  public S hasTrainer(org.springframework.samples.petclinic.model.Trainer trainer) {
    // check that actual Rehab we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting trainer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Trainer actualTrainer = actual.getTrainer();
    if (!Objects.areEqual(actualTrainer, trainer)) {
      failWithMessage(assertjErrorMessage, actual, trainer, actualTrainer);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
