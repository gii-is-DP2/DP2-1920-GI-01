package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Intervention;
import org.springframework.samples.petclinic.model.Pet;
import org.springframework.samples.petclinic.model.Rehab;
import org.springframework.samples.petclinic.model.Visit;

/**
 * Abstract base class for {@link Pet} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractPetAssert<S extends AbstractPetAssert<S, A>, A extends Pet> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractPetAssert}</code> to make assertions on actual Pet.
   * @param actual the Pet we want to make assertions on.
   */
  protected AbstractPetAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Pet's birthDate is equal to the given one.
   * @param birthDate the given birthDate to compare the actual Pet's birthDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Pet's birthDate is not equal to the given one.
   */
  public S hasBirthDate(java.time.LocalDate birthDate) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting birthDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualBirthDate = actual.getBirthDate();
    if (!Objects.areEqual(actualBirthDate, birthDate)) {
      failWithMessage(assertjErrorMessage, actual, birthDate, actualBirthDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's interventions contains the given Intervention elements.
   * @param interventions the given elements that should be contained in actual Pet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's interventions does not contain all given Intervention elements.
   */
  public S hasInterventions(Intervention... interventions) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention varargs is not null.
    if (interventions == null) failWithMessage("Expecting interventions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getInterventions(), interventions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's interventions contains the given Intervention elements in Collection.
   * @param interventions the given elements that should be contained in actual Pet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's interventions does not contain all given Intervention elements.
   */
  public S hasInterventions(java.util.Collection<? extends Intervention> interventions) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention collection is not null.
    if (interventions == null) {
      failWithMessage("Expecting interventions parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getInterventions(), interventions.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's interventions contains <b>only</b> the given Intervention elements and nothing else in whatever order.
   * @param interventions the given elements that should be contained in actual Pet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's interventions does not contain all given Intervention elements.
   */
  public S hasOnlyInterventions(Intervention... interventions) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention varargs is not null.
    if (interventions == null) failWithMessage("Expecting interventions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getInterventions(), interventions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's interventions contains <b>only</b> the given Intervention elements in Collection and nothing else in whatever order.
   * @param interventions the given elements that should be contained in actual Pet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's interventions does not contain all given Intervention elements.
   */
  public S hasOnlyInterventions(java.util.Collection<? extends Intervention> interventions) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention collection is not null.
    if (interventions == null) {
      failWithMessage("Expecting interventions parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getInterventions(), interventions.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's interventions does not contain the given Intervention elements.
   *
   * @param interventions the given elements that should not be in actual Pet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's interventions contains any given Intervention elements.
   */
  public S doesNotHaveInterventions(Intervention... interventions) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention varargs is not null.
    if (interventions == null) failWithMessage("Expecting interventions parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getInterventions(), interventions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's interventions does not contain the given Intervention elements in Collection.
   *
   * @param interventions the given elements that should not be in actual Pet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's interventions contains any given Intervention elements.
   */
  public S doesNotHaveInterventions(java.util.Collection<? extends Intervention> interventions) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention collection is not null.
    if (interventions == null) {
      failWithMessage("Expecting interventions parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getInterventions(), interventions.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet has no interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's interventions is not empty.
   */
  public S hasNoInterventions() {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have interventions but had :\n  <%s>";

    // check
    if (actual.getInterventions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getInterventions());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Pet's owner is equal to the given one.
   * @param owner the given owner to compare the actual Pet's owner to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Pet's owner is not equal to the given one.
   */
  public S hasOwner(org.springframework.samples.petclinic.model.Owner owner) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting owner of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Owner actualOwner = actual.getOwner();
    if (!Objects.areEqual(actualOwner, owner)) {
      failWithMessage(assertjErrorMessage, actual, owner, actualOwner);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's rehabs contains the given Rehab elements.
   * @param rehabs the given elements that should be contained in actual Pet's rehabs.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's rehabs does not contain all given Rehab elements.
   */
  public S hasRehabs(Rehab... rehabs) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Rehab varargs is not null.
    if (rehabs == null) failWithMessage("Expecting rehabs parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRehabs(), rehabs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's rehabs contains the given Rehab elements in Collection.
   * @param rehabs the given elements that should be contained in actual Pet's rehabs.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's rehabs does not contain all given Rehab elements.
   */
  public S hasRehabs(java.util.Collection<? extends Rehab> rehabs) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Rehab collection is not null.
    if (rehabs == null) {
      failWithMessage("Expecting rehabs parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRehabs(), rehabs.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's rehabs contains <b>only</b> the given Rehab elements and nothing else in whatever order.
   * @param rehabs the given elements that should be contained in actual Pet's rehabs.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's rehabs does not contain all given Rehab elements.
   */
  public S hasOnlyRehabs(Rehab... rehabs) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Rehab varargs is not null.
    if (rehabs == null) failWithMessage("Expecting rehabs parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRehabs(), rehabs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's rehabs contains <b>only</b> the given Rehab elements in Collection and nothing else in whatever order.
   * @param rehabs the given elements that should be contained in actual Pet's rehabs.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's rehabs does not contain all given Rehab elements.
   */
  public S hasOnlyRehabs(java.util.Collection<? extends Rehab> rehabs) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Rehab collection is not null.
    if (rehabs == null) {
      failWithMessage("Expecting rehabs parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRehabs(), rehabs.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's rehabs does not contain the given Rehab elements.
   *
   * @param rehabs the given elements that should not be in actual Pet's rehabs.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's rehabs contains any given Rehab elements.
   */
  public S doesNotHaveRehabs(Rehab... rehabs) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Rehab varargs is not null.
    if (rehabs == null) failWithMessage("Expecting rehabs parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRehabs(), rehabs);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's rehabs does not contain the given Rehab elements in Collection.
   *
   * @param rehabs the given elements that should not be in actual Pet's rehabs.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's rehabs contains any given Rehab elements.
   */
  public S doesNotHaveRehabs(java.util.Collection<? extends Rehab> rehabs) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Rehab collection is not null.
    if (rehabs == null) {
      failWithMessage("Expecting rehabs parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRehabs(), rehabs.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet has no rehabs.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's rehabs is not empty.
   */
  public S hasNoRehabs() {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have rehabs but had :\n  <%s>";

    // check
    if (actual.getRehabs().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getRehabs());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Pet's type is equal to the given one.
   * @param type the given type to compare the actual Pet's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Pet's type is not equal to the given one.
   */
  public S hasType(org.springframework.samples.petclinic.model.PetType type) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.PetType actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's visits contains the given Visit elements.
   * @param visits the given elements that should be contained in actual Pet's visits.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's visits does not contain all given Visit elements.
   */
  public S hasVisits(Visit... visits) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Visit varargs is not null.
    if (visits == null) failWithMessage("Expecting visits parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVisits(), visits);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's visits contains the given Visit elements in Collection.
   * @param visits the given elements that should be contained in actual Pet's visits.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's visits does not contain all given Visit elements.
   */
  public S hasVisits(java.util.Collection<? extends Visit> visits) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Visit collection is not null.
    if (visits == null) {
      failWithMessage("Expecting visits parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVisits(), visits.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's visits contains <b>only</b> the given Visit elements and nothing else in whatever order.
   * @param visits the given elements that should be contained in actual Pet's visits.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's visits does not contain all given Visit elements.
   */
  public S hasOnlyVisits(Visit... visits) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Visit varargs is not null.
    if (visits == null) failWithMessage("Expecting visits parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVisits(), visits);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's visits contains <b>only</b> the given Visit elements in Collection and nothing else in whatever order.
   * @param visits the given elements that should be contained in actual Pet's visits.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's visits does not contain all given Visit elements.
   */
  public S hasOnlyVisits(java.util.Collection<? extends Visit> visits) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Visit collection is not null.
    if (visits == null) {
      failWithMessage("Expecting visits parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVisits(), visits.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's visits does not contain the given Visit elements.
   *
   * @param visits the given elements that should not be in actual Pet's visits.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's visits contains any given Visit elements.
   */
  public S doesNotHaveVisits(Visit... visits) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Visit varargs is not null.
    if (visits == null) failWithMessage("Expecting visits parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVisits(), visits);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet's visits does not contain the given Visit elements in Collection.
   *
   * @param visits the given elements that should not be in actual Pet's visits.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's visits contains any given Visit elements.
   */
  public S doesNotHaveVisits(java.util.Collection<? extends Visit> visits) {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // check that given Visit collection is not null.
    if (visits == null) {
      failWithMessage("Expecting visits parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVisits(), visits.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Pet has no visits.
   * @return this assertion object.
   * @throws AssertionError if the actual Pet's visits is not empty.
   */
  public S hasNoVisits() {
    // check that actual Pet we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have visits but had :\n  <%s>";

    // check
    if (actual.getVisits().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVisits());
    }

    // return the current assertion for method chaining
    return myself;
  }
}
