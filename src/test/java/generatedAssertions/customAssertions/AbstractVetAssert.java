package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Intervention;
import org.springframework.samples.petclinic.model.Specialty;
import org.springframework.samples.petclinic.model.User;
import org.springframework.samples.petclinic.model.Vet;

/**
 * Abstract base class for {@link Vet} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractVetAssert<S extends AbstractVetAssert<S, A>, A extends Vet> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractVetAssert}</code> to make assertions on actual Vet.
   * @param actual the Vet we want to make assertions on.
   */
  protected AbstractVetAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Vet's interventions contains the given Intervention elements.
   * @param interventions the given elements that should be contained in actual Vet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's interventions does not contain all given Intervention elements.
   */
  public S hasInterventions(Intervention... interventions) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention varargs is not null.
    if (interventions == null) failWithMessage("Expecting interventions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getInterventions(), interventions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's interventions contains the given Intervention elements in Collection.
   * @param interventions the given elements that should be contained in actual Vet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's interventions does not contain all given Intervention elements.
   */
  public S hasInterventions(java.util.Collection<? extends Intervention> interventions) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention collection is not null.
    if (interventions == null) {
      failWithMessage("Expecting interventions parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getInterventions(), interventions.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's interventions contains <b>only</b> the given Intervention elements and nothing else in whatever order.
   * @param interventions the given elements that should be contained in actual Vet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's interventions does not contain all given Intervention elements.
   */
  public S hasOnlyInterventions(Intervention... interventions) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention varargs is not null.
    if (interventions == null) failWithMessage("Expecting interventions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getInterventions(), interventions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's interventions contains <b>only</b> the given Intervention elements in Collection and nothing else in whatever order.
   * @param interventions the given elements that should be contained in actual Vet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's interventions does not contain all given Intervention elements.
   */
  public S hasOnlyInterventions(java.util.Collection<? extends Intervention> interventions) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention collection is not null.
    if (interventions == null) {
      failWithMessage("Expecting interventions parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getInterventions(), interventions.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's interventions does not contain the given Intervention elements.
   *
   * @param interventions the given elements that should not be in actual Vet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's interventions contains any given Intervention elements.
   */
  public S doesNotHaveInterventions(Intervention... interventions) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention varargs is not null.
    if (interventions == null) failWithMessage("Expecting interventions parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getInterventions(), interventions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's interventions does not contain the given Intervention elements in Collection.
   *
   * @param interventions the given elements that should not be in actual Vet's interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's interventions contains any given Intervention elements.
   */
  public S doesNotHaveInterventions(java.util.Collection<? extends Intervention> interventions) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Intervention collection is not null.
    if (interventions == null) {
      failWithMessage("Expecting interventions parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getInterventions(), interventions.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet has no interventions.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's interventions is not empty.
   */
  public S hasNoInterventions() {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have interventions but had :\n  <%s>";

    // check
    if (actual.getInterventions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getInterventions());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Vet's nrOfSpecialties is equal to the given one.
   * @param nrOfSpecialties the given nrOfSpecialties to compare the actual Vet's nrOfSpecialties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Vet's nrOfSpecialties is not equal to the given one.
   */
  public S hasNrOfSpecialties(int nrOfSpecialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nrOfSpecialties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualNrOfSpecialties = actual.getNrOfSpecialties();
    if (actualNrOfSpecialties != nrOfSpecialties) {
      failWithMessage(assertjErrorMessage, actual, nrOfSpecialties, actualNrOfSpecialties);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's specialties contains the given Specialty elements.
   * @param specialties the given elements that should be contained in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties does not contain all given Specialty elements.
   */
  public S hasSpecialties(Specialty... specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty varargs is not null.
    if (specialties == null) failWithMessage("Expecting specialties parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSpecialties(), specialties);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's specialties contains the given Specialty elements in Collection.
   * @param specialties the given elements that should be contained in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties does not contain all given Specialty elements.
   */
  public S hasSpecialties(java.util.Collection<? extends Specialty> specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty collection is not null.
    if (specialties == null) {
      failWithMessage("Expecting specialties parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSpecialties(), specialties.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's specialties contains <b>only</b> the given Specialty elements and nothing else in whatever order.
   * @param specialties the given elements that should be contained in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties does not contain all given Specialty elements.
   */
  public S hasOnlySpecialties(Specialty... specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty varargs is not null.
    if (specialties == null) failWithMessage("Expecting specialties parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSpecialties(), specialties);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's specialties contains <b>only</b> the given Specialty elements in Collection and nothing else in whatever order.
   * @param specialties the given elements that should be contained in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties does not contain all given Specialty elements.
   */
  public S hasOnlySpecialties(java.util.Collection<? extends Specialty> specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty collection is not null.
    if (specialties == null) {
      failWithMessage("Expecting specialties parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSpecialties(), specialties.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's specialties does not contain the given Specialty elements.
   *
   * @param specialties the given elements that should not be in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties contains any given Specialty elements.
   */
  public S doesNotHaveSpecialties(Specialty... specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty varargs is not null.
    if (specialties == null) failWithMessage("Expecting specialties parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSpecialties(), specialties);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet's specialties does not contain the given Specialty elements in Collection.
   *
   * @param specialties the given elements that should not be in actual Vet's specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties contains any given Specialty elements.
   */
  public S doesNotHaveSpecialties(java.util.Collection<? extends Specialty> specialties) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // check that given Specialty collection is not null.
    if (specialties == null) {
      failWithMessage("Expecting specialties parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSpecialties(), specialties.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Vet has no specialties.
   * @return this assertion object.
   * @throws AssertionError if the actual Vet's specialties is not empty.
   */
  public S hasNoSpecialties() {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have specialties but had :\n  <%s>";

    // check
    if (actual.getSpecialties().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSpecialties());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Vet's user is equal to the given one.
   * @param user the given user to compare the actual Vet's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Vet's user is not equal to the given one.
   */
  public S hasUser(User user) {
    // check that actual Vet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    User actualUser = actual.getUser();
    if (!Objects.areEqual(actualUser, user)) {
      failWithMessage(assertjErrorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
