package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Owner;
import org.springframework.samples.petclinic.model.Pet;
import org.springframework.samples.petclinic.model.User;

/**
 * Abstract base class for {@link Owner} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractOwnerAssert<S extends AbstractOwnerAssert<S, A>, A extends Owner> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractOwnerAssert}</code> to make assertions on actual Owner.
   * @param actual the Owner we want to make assertions on.
   */
  protected AbstractOwnerAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Owner's address is equal to the given one.
   * @param address the given address to compare the actual Owner's address to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's address is not equal to the given one.
   */
  public S hasAddress(String address) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting address of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAddress = actual.getAddress();
    if (!Objects.areEqual(actualAddress, address)) {
      failWithMessage(assertjErrorMessage, actual, address, actualAddress);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Owner's city is equal to the given one.
   * @param city the given city to compare the actual Owner's city to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's city is not equal to the given one.
   */
  public S hasCity(String city) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting city of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCity = actual.getCity();
    if (!Objects.areEqual(actualCity, city)) {
      failWithMessage(assertjErrorMessage, actual, city, actualCity);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Owner's pets contains the given Pet elements.
   * @param pets the given elements that should be contained in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets does not contain all given Pet elements.
   */
  public S hasPets(Pet... pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet varargs is not null.
    if (pets == null) failWithMessage("Expecting pets parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPets(), pets);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Owner's pets contains the given Pet elements in Collection.
   * @param pets the given elements that should be contained in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets does not contain all given Pet elements.
   */
  public S hasPets(java.util.Collection<? extends Pet> pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet collection is not null.
    if (pets == null) {
      failWithMessage("Expecting pets parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPets(), pets.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Owner's pets contains <b>only</b> the given Pet elements and nothing else in whatever order.
   * @param pets the given elements that should be contained in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets does not contain all given Pet elements.
   */
  public S hasOnlyPets(Pet... pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet varargs is not null.
    if (pets == null) failWithMessage("Expecting pets parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPets(), pets);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Owner's pets contains <b>only</b> the given Pet elements in Collection and nothing else in whatever order.
   * @param pets the given elements that should be contained in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets does not contain all given Pet elements.
   */
  public S hasOnlyPets(java.util.Collection<? extends Pet> pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet collection is not null.
    if (pets == null) {
      failWithMessage("Expecting pets parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPets(), pets.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Owner's pets does not contain the given Pet elements.
   *
   * @param pets the given elements that should not be in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets contains any given Pet elements.
   */
  public S doesNotHavePets(Pet... pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet varargs is not null.
    if (pets == null) failWithMessage("Expecting pets parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPets(), pets);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Owner's pets does not contain the given Pet elements in Collection.
   *
   * @param pets the given elements that should not be in actual Owner's pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets contains any given Pet elements.
   */
  public S doesNotHavePets(java.util.Collection<? extends Pet> pets) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // check that given Pet collection is not null.
    if (pets == null) {
      failWithMessage("Expecting pets parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPets(), pets.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Owner has no pets.
   * @return this assertion object.
   * @throws AssertionError if the actual Owner's pets is not empty.
   */
  public S hasNoPets() {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have pets but had :\n  <%s>";

    // check
    if (actual.getPets().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPets());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Owner's telephone is equal to the given one.
   * @param telephone the given telephone to compare the actual Owner's telephone to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's telephone is not equal to the given one.
   */
  public S hasTelephone(String telephone) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting telephone of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTelephone = actual.getTelephone();
    if (!Objects.areEqual(actualTelephone, telephone)) {
      failWithMessage(assertjErrorMessage, actual, telephone, actualTelephone);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Owner's user is equal to the given one.
   * @param user the given user to compare the actual Owner's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Owner's user is not equal to the given one.
   */
  public S hasUser(User user) {
    // check that actual Owner we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    User actualUser = actual.getUser();
    if (!Objects.areEqual(actualUser, user)) {
      failWithMessage(assertjErrorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
