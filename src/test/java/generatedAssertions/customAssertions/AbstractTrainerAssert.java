
package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Trainer;
import org.springframework.samples.petclinic.model.User;

/**
 * Abstract base class for {@link Trainer} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractTrainerAssert<S extends AbstractTrainerAssert<S, A>, A extends Trainer> extends AbstractObjectAssert<S, A> {

	/**
	 * Creates a new <code>{@link AbstractTrainerAssert}</code> to make assertions on actual Trainer.
	 *
	 * @param actual
	 *            the Trainer we want to make assertions on.
	 */
	protected AbstractTrainerAssert(final A actual, final Class<S> selfType) {
		super(actual, selfType);
	}

	/**
	 * Verifies that the actual Trainer's email is equal to the given one.
	 *
	 * @param email
	 *            the given email to compare the actual Trainer's email to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Trainer's email is not equal to the given one.
	 */
	public S hasEmail(final String email) {
		// check that actual Trainer we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting email of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualEmail = this.actual.getEmail();
		if (!Objects.areEqual(actualEmail, email)) {
			this.failWithMessage(assertjErrorMessage, this.actual, email, actualEmail);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Trainer's phone is equal to the given one.
	 *
	 * @param phone
	 *            the given phone to compare the actual Trainer's phone to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Trainer's phone is not equal to the given one.
	 */
	public S hasPhone(final String phone) {
		// check that actual Trainer we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting phone of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualPhone = this.actual.getPhone();
		if (!Objects.areEqual(actualPhone, phone)) {
			this.failWithMessage(assertjErrorMessage, this.actual, phone, actualPhone);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Trainer's user is equal to the given one.
	 *
	 * @param user
	 *            the given user to compare the actual Trainer's user to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Trainer's user is not equal to the given one.
	 */
	public S hasUser(final User user) {
		// check that actual Trainer we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		User actualUser = this.actual.getUser();
		if (!Objects.areEqual(actualUser, user)) {
			this.failWithMessage(assertjErrorMessage, this.actual, user, actualUser);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

}
