
package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.MedicalRecord;
import org.springframework.samples.petclinic.model.Medicine;
import org.springframework.samples.petclinic.model.Prescription;

/**
 * Abstract base class for {@link Prescription} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractPrescriptionAssert<S extends AbstractPrescriptionAssert<S, A>, A extends Prescription> extends AbstractObjectAssert<S, A> {

	/**
	 * Creates a new <code>{@link AbstractPrescriptionAssert}</code> to make assertions on actual Prescription.
	 * 
	 * @param actual
	 *            the Prescription we want to make assertions on.
	 */
	protected AbstractPrescriptionAssert(final A actual, final Class<S> selfType) {
		super(actual, selfType);
	}

	/**
	 * Verifies that the actual Prescription's dose is equal to the given one.
	 * 
	 * @param dose
	 *            the given dose to compare the actual Prescription's dose to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Prescription's dose is not equal to the given one.
	 */
	public S hasDose(final String dose) {
		// check that actual Prescription we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting dose of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualDose = this.actual.getDose();
		if (!Objects.areEqual(actualDose, dose)) {
			this.failWithMessage(assertjErrorMessage, this.actual, dose, actualDose);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Prescription's medicalRecord is equal to the given one.
	 * 
	 * @param medicalRecord
	 *            the given medicalRecord to compare the actual Prescription's medicalRecord to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Prescription's medicalRecord is not equal to the given one.
	 */
	public S hasMedicalRecord(final MedicalRecord medicalRecord) {
		// check that actual Prescription we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting medicalRecord of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		MedicalRecord actualMedicalRecord = this.actual.getMedicalRecord();
		if (!Objects.areEqual(actualMedicalRecord, medicalRecord)) {
			this.failWithMessage(assertjErrorMessage, this.actual, medicalRecord, actualMedicalRecord);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Prescription's medicine is equal to the given one.
	 * 
	 * @param medicine
	 *            the given medicine to compare the actual Prescription's medicine to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Prescription's medicine is not equal to the given one.
	 */
	public S hasMedicine(final Medicine medicine) {
		// check that actual Prescription we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting medicine of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Medicine actualMedicine = this.actual.getMedicine();
		if (!Objects.areEqual(actualMedicine, medicine)) {
			this.failWithMessage(assertjErrorMessage, this.actual, medicine, actualMedicine);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

}
