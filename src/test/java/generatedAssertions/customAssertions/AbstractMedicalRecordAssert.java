
package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.MedicalRecord;
import org.springframework.samples.petclinic.model.Visit;

/**
 * Abstract base class for {@link MedicalRecord} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractMedicalRecordAssert<S extends AbstractMedicalRecordAssert<S, A>, A extends MedicalRecord> extends AbstractObjectAssert<S, A> {

	/**
	 * Creates a new <code>{@link AbstractMedicalRecordAssert}</code> to make assertions on actual MedicalRecord.
	 * 
	 * @param actual
	 *            the MedicalRecord we want to make assertions on.
	 */
	protected AbstractMedicalRecordAssert(final A actual, final Class<S> selfType) {
		super(actual, selfType);
	}

	/**
	 * Verifies that the actual MedicalRecord's description is equal to the given one.
	 * 
	 * @param description
	 *            the given description to compare the actual MedicalRecord's description to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual MedicalRecord's description is not equal to the given one.
	 */
	public S hasDescription(final String description) {
		// check that actual MedicalRecord we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualDescription = this.actual.getDescription();
		if (!Objects.areEqual(actualDescription, description)) {
			this.failWithMessage(assertjErrorMessage, this.actual, description, actualDescription);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual MedicalRecord's status is equal to the given one.
	 * 
	 * @param status
	 *            the given status to compare the actual MedicalRecord's status to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual MedicalRecord's status is not equal to the given one.
	 */
	public S hasStatus(final String status) {
		// check that actual MedicalRecord we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualStatus = this.actual.getStatus();
		if (!Objects.areEqual(actualStatus, status)) {
			this.failWithMessage(assertjErrorMessage, this.actual, status, actualStatus);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual MedicalRecord's visit is equal to the given one.
	 * 
	 * @param visit
	 *            the given visit to compare the actual MedicalRecord's visit to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual MedicalRecord's visit is not equal to the given one.
	 */
	public S hasVisit(final Visit visit) {
		// check that actual MedicalRecord we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting visit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Visit actualVisit = this.actual.getVisit();
		if (!Objects.areEqual(actualVisit, visit)) {
			this.failWithMessage(assertjErrorMessage, this.actual, visit, actualVisit);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

}
