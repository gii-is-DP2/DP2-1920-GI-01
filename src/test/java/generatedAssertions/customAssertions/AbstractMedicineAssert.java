package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Medicine;
import org.springframework.samples.petclinic.model.PetType;

/**
 * Abstract base class for {@link Medicine} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractMedicineAssert<S extends AbstractMedicineAssert<S, A>, A extends Medicine> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMedicineAssert}</code> to make assertions on actual Medicine.
   * @param actual the Medicine we want to make assertions on.
   */
  protected AbstractMedicineAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Medicine's expirationDate is equal to the given one.
   * @param expirationDate the given expirationDate to compare the actual Medicine's expirationDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Medicine's expirationDate is not equal to the given one.
   */
  public S hasExpirationDate(java.time.LocalDate expirationDate) {
    // check that actual Medicine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting expirationDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualExpirationDate = actual.getExpirationDate();
    if (!Objects.areEqual(actualExpirationDate, expirationDate)) {
      failWithMessage(assertjErrorMessage, actual, expirationDate, actualExpirationDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Medicine's maker is equal to the given one.
   * @param maker the given maker to compare the actual Medicine's maker to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Medicine's maker is not equal to the given one.
   */
  public S hasMaker(String maker) {
    // check that actual Medicine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting maker of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualMaker = actual.getMaker();
    if (!Objects.areEqual(actualMaker, maker)) {
      failWithMessage(assertjErrorMessage, actual, maker, actualMaker);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Medicine's petType is equal to the given one.
   * @param petType the given petType to compare the actual Medicine's petType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Medicine's petType is not equal to the given one.
   */
  public S hasPetType(PetType petType) {
    // check that actual Medicine we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting petType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    PetType actualPetType = actual.getPetType();
    if (!Objects.areEqual(actualPetType, petType)) {
      failWithMessage(assertjErrorMessage, actual, petType, actualPetType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
