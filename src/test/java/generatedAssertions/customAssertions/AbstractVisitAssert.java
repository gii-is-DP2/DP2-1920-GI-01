
package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Pet;
import org.springframework.samples.petclinic.model.Visit;

/**
 * Abstract base class for {@link Visit} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractVisitAssert<S extends AbstractVisitAssert<S, A>, A extends Visit> extends AbstractObjectAssert<S, A> {

	/**
	 * Creates a new <code>{@link AbstractVisitAssert}</code> to make assertions on actual Visit.
	 * 
	 * @param actual
	 *            the Visit we want to make assertions on.
	 */
	protected AbstractVisitAssert(final A actual, final Class<S> selfType) {
		super(actual, selfType);
	}

	/**
	 * Verifies that the actual Visit's date is equal to the given one.
	 * 
	 * @param date
	 *            the given date to compare the actual Visit's date to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Visit's date is not equal to the given one.
	 */
	public S hasDate(final java.time.LocalDate date) {
		// check that actual Visit we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting date of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		java.time.LocalDate actualDate = this.actual.getDate();
		if (!Objects.areEqual(actualDate, date)) {
			this.failWithMessage(assertjErrorMessage, this.actual, date, actualDate);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Visit's description is equal to the given one.
	 * 
	 * @param description
	 *            the given description to compare the actual Visit's description to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Visit's description is not equal to the given one.
	 */
	public S hasDescription(final String description) {
		// check that actual Visit we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualDescription = this.actual.getDescription();
		if (!Objects.areEqual(actualDescription, description)) {
			this.failWithMessage(assertjErrorMessage, this.actual, description, actualDescription);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Visit's pet is equal to the given one.
	 * 
	 * @param pet
	 *            the given pet to compare the actual Visit's pet to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Visit's pet is not equal to the given one.
	 */
	public S hasPet(final Pet pet) {
		// check that actual Visit we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting pet of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Pet actualPet = this.actual.getPet();
		if (!Objects.areEqual(actualPet, pet)) {
			this.failWithMessage(assertjErrorMessage, this.actual, pet, actualPet);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

}
