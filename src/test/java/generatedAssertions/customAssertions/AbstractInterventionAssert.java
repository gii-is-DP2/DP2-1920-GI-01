
package generatedAssertions.customAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Intervention;
import org.springframework.samples.petclinic.model.Pet;
import org.springframework.samples.petclinic.model.Vet;

/**
 * Abstract base class for {@link Intervention} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractInterventionAssert<S extends AbstractInterventionAssert<S, A>, A extends Intervention> extends AbstractObjectAssert<S, A> {

	/**
	 * Creates a new <code>{@link AbstractInterventionAssert}</code> to make assertions on actual Intervention.
	 *
	 * @param actual
	 *            the Intervention we want to make assertions on.
	 */
	protected AbstractInterventionAssert(final A actual, final Class<S> selfType) {
		super(actual, selfType);
	}

	/**
	 * Verifies that the actual Intervention's interventionDate is equal to the given one.
	 *
	 * @param interventionDate
	 *            the given interventionDate to compare the actual Intervention's interventionDate to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Intervention's interventionDate is not equal to the given one.
	 */
	public S hasInterventionDate(final java.time.LocalDate interventionDate) {
		// check that actual Intervention we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting interventionDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		java.time.LocalDate actualInterventionDate = this.actual.getInterventionDate();
		if (!Objects.areEqual(actualInterventionDate, interventionDate)) {
			this.failWithMessage(assertjErrorMessage, this.actual, interventionDate, actualInterventionDate);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Intervention's interventionDescription is equal to the given one.
	 *
	 * @param interventionDescription
	 *            the given interventionDescription to compare the actual Intervention's interventionDescription to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Intervention's interventionDescription is not equal to the given one.
	 */
	public S hasInterventionDescription(final String interventionDescription) {
		// check that actual Intervention we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting interventionDescription of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualInterventionDescription = this.actual.getInterventionDescription();
		if (!Objects.areEqual(actualInterventionDescription, interventionDescription)) {
			this.failWithMessage(assertjErrorMessage, this.actual, interventionDescription, actualInterventionDescription);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Intervention's interventionTime is equal to the given one.
	 *
	 * @param interventionTime
	 *            the given interventionTime to compare the actual Intervention's interventionTime to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Intervention's interventionTime is not equal to the given one.
	 */
	public S hasInterventionTime(final Integer interventionTime) {
		// check that actual Intervention we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting interventionTime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Integer actualInterventionTime = this.actual.getInterventionTime();
		if (!Objects.areEqual(actualInterventionTime, interventionTime)) {
			this.failWithMessage(assertjErrorMessage, this.actual, interventionTime, actualInterventionTime);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Intervention's pet is equal to the given one.
	 *
	 * @param pet
	 *            the given pet to compare the actual Intervention's pet to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Intervention's pet is not equal to the given one.
	 */
	public S hasPet(final Pet pet) {
		// check that actual Intervention we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting pet of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Pet actualPet = this.actual.getPet();
		if (!Objects.areEqual(actualPet, pet)) {
			this.failWithMessage(assertjErrorMessage, this.actual, pet, actualPet);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

	/**
	 * Verifies that the actual Intervention's vet is equal to the given one.
	 *
	 * @param vet
	 *            the given vet to compare the actual Intervention's vet to.
	 * @return this assertion object.
	 * @throws AssertionError
	 *             - if the actual Intervention's vet is not equal to the given one.
	 */
	public S hasVet(final Vet vet) {
		// check that actual Intervention we want to make assertions on is not null.
		this.isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpecting vet of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		Vet actualVet = this.actual.getVet();
		if (!Objects.areEqual(actualVet, vet)) {
			this.failWithMessage(assertjErrorMessage, this.actual, vet, actualVet);
		}

		// return the current assertion for method chaining
		return this.myself;
	}

}
